{"ast":null,"code":"/**\r\n * @ignore\r\n * @type {RegExp}\r\n */\nconst matrixRegex = /^matrix\\(\\s*([0-9_+-.e]+)\\s*,\\s*([0-9_+-.e]+)\\s*,\\s*([0-9_+-.e]+)\\s*,\\s*([0-9_+-.e]+)\\s*,\\s*([0-9_+-.e]+)\\s*,\\s*([0-9_+-.e]+)\\s*\\)$/i;\n\n/**\r\n * Parse a string formatted as matrix(a,b,c,d,e,f)\r\n * @param string {string} String with an affine matrix\r\n * @returns {Matrix} Affine Matrix\r\n *\r\n * @example\r\n * > fromString('matrix(1,2,3,4,5,6)')\r\n * {a: 1, b: 2, c: 3, d: 4, c: 5, e: 6}\r\n */\nexport function fromString(string) {\n  const parsed = string.match(matrixRegex);\n  if (parsed === null || parsed.length < 7) throw new Error(`'${string}' is not a matrix`);\n  return {\n    a: parseFloat(parsed[1]),\n    b: parseFloat(parsed[2]),\n    c: parseFloat(parsed[3]),\n    d: parseFloat(parsed[4]),\n    e: parseFloat(parsed[5]),\n    f: parseFloat(parsed[6])\n  };\n}","map":{"version":3,"names":["matrixRegex","fromString","string","parsed","match","length","Error","a","parseFloat","b","c","d","e","f"],"sources":["C:/Users/karkr/Documents/classes/dev10/dev10-capstone/dev10-capstone-test/frontend/node_modules/transformation-matrix/src/fromString.js"],"sourcesContent":["/**\r\n * @ignore\r\n * @type {RegExp}\r\n */\r\nconst matrixRegex = /^matrix\\(\\s*([0-9_+-.e]+)\\s*,\\s*([0-9_+-.e]+)\\s*,\\s*([0-9_+-.e]+)\\s*,\\s*([0-9_+-.e]+)\\s*,\\s*([0-9_+-.e]+)\\s*,\\s*([0-9_+-.e]+)\\s*\\)$/i\r\n\r\n/**\r\n * Parse a string formatted as matrix(a,b,c,d,e,f)\r\n * @param string {string} String with an affine matrix\r\n * @returns {Matrix} Affine Matrix\r\n *\r\n * @example\r\n * > fromString('matrix(1,2,3,4,5,6)')\r\n * {a: 1, b: 2, c: 3, d: 4, c: 5, e: 6}\r\n */\r\nexport function fromString (string) {\r\n  const parsed = string.match(matrixRegex)\r\n  if (parsed === null || parsed.length < 7) throw new Error(`'${string}' is not a matrix`)\r\n  return {\r\n    a: parseFloat(parsed[1]),\r\n    b: parseFloat(parsed[2]),\r\n    c: parseFloat(parsed[3]),\r\n    d: parseFloat(parsed[4]),\r\n    e: parseFloat(parsed[5]),\r\n    f: parseFloat(parsed[6])\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,MAAMA,WAAW,GAAG,sIAAsI;;AAE1J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAAEC,MAAM,EAAE;EAClC,MAAMC,MAAM,GAAGD,MAAM,CAACE,KAAK,CAACJ,WAAW,CAAC;EACxC,IAAIG,MAAM,KAAK,IAAI,IAAIA,MAAM,CAACE,MAAM,GAAG,CAAC,EAAE,MAAM,IAAIC,KAAK,CAAE,IAAGJ,MAAO,mBAAkB,CAAC;EACxF,OAAO;IACLK,CAAC,EAAEC,UAAU,CAACL,MAAM,CAAC,CAAC,CAAC,CAAC;IACxBM,CAAC,EAAED,UAAU,CAACL,MAAM,CAAC,CAAC,CAAC,CAAC;IACxBO,CAAC,EAAEF,UAAU,CAACL,MAAM,CAAC,CAAC,CAAC,CAAC;IACxBQ,CAAC,EAAEH,UAAU,CAACL,MAAM,CAAC,CAAC,CAAC,CAAC;IACxBS,CAAC,EAAEJ,UAAU,CAACL,MAAM,CAAC,CAAC,CAAC,CAAC;IACxBU,CAAC,EAAEL,UAAU,CAACL,MAAM,CAAC,CAAC,CAAC;EACzB,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}